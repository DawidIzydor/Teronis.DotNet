<Project InitialTargets="_ValidatePackExecutableProperties">

  <Import Project="$(MSBuildThisFileDirectory)Teronis.MSBuild.Packaging.PackExecutable.props" Condition="'$(TeronisMSBuildPackagingPackExecutableHasBeenImported)' != 'true'"/>
  
  <PropertyGroup>
    <TargetsForTfmSpecificContentInPackage>$(TargetsForTfmSpecificContentInPackage);$(TargetsForTfmSpecificExecutableSourceProjectContentInPackage);$(TargetsForTfmSpecificExecutablePackageProjectContentInPackage)</TargetsForTfmSpecificContentInPackage>
  </PropertyGroup>

  <PropertyGroup Condition="'$(PackAsExecutable)' == 'Project'">
    <NoPackageAnalysis>true</NoPackageAnalysis>
    <IncludeBuildOutput>false</IncludeBuildOutput>
  </PropertyGroup>

  <PropertyGroup Condition="'$(PackAsExecutable)' == 'Publish'">
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <IsPackable>false</IsPackable>
    <EnableDefaultCompileItems>false</EnableDefaultCompileItems>
    <EnableDefaultEmbeddedResourceItems>false</EnableDefaultEmbeddedResourceItems>
    <!-- There is a bug that msbuild is still generating the assembly info. -->
    <!--<GenerateAssemblyInfo>false</GenerateAssemblyInfo>-->
    <!--<DisableImplicitFrameworkReferences>true</DisableImplicitFrameworkReferences>-->
  </PropertyGroup>

  <PropertyGroup Condition="'$(PackAsExecutable)' == 'Package' Or '$(PackAsExecutable)' == 'Publish'">
    <ExecutableSourceProjectFilename>$([System.IO.Path]::GetFileNameWithoutExtension('$(ExecutableProjectReference)'))</ExecutableSourceProjectFilename>
    <ExecutableSourceProjectFullName>$([System.IO.Path]::GetFileName('$(ExecutableProjectReference)'))</ExecutableSourceProjectFullName>
    <ExecutableSourceProjectDirectory>$([System.IO.Path]::GetDirectoryName('$(ExecutableProjectReference)'))</ExecutableSourceProjectDirectory>
    <ExecutableSourceProjectDirectory>$(MSBuildProjectDirectory)\$(ExecutableSourceProjectDirectory)</ExecutableSourceProjectDirectory>
    <ExecutableSourceProjectDirectory>$([System.IO.Path]::GetFullPath('$(ExecutableSourceProjectDirectory)'))</ExecutableSourceProjectDirectory>
    <ExecutableSourceProjectFullPath>$(ExecutableSourceProjectDirectory)\$(ExecutableSourceProjectFullName)</ExecutableSourceProjectFullPath>
  </PropertyGroup>

  <PropertyGroup Condition="'$(PackAsExecutable)' == 'Package'">
    <PackageId>$(ExecutableSourceProjectFilename)</PackageId>
    <IncludeBuildOutput>false</IncludeBuildOutput>
    <NoPackageAnalysis>true</NoPackageAnalysis>
    <EnableDefaultCompileItems>false</EnableDefaultCompileItems>
    <EnableDefaultEmbeddedResourceItems>false</EnableDefaultEmbeddedResourceItems>
    <!-- See above -->
    <!--<GenerateAssemblyInfo>false</GenerateAssemblyInfo>-->
    <!--<DisableImplicitFrameworkReferences>true</DisableImplicitFrameworkReferences>-->
    <GenerateNuspecDependsOn>$(GenerateNuspecDependsOn);$(GenerateNuspecWhenPackingExecutablePackageProjectDependsOn)</GenerateNuspecDependsOn>
  </PropertyGroup>

  <ItemGroup>
    <ProjectReference Include="$(ExecutableSourceProjectFullPath)" Condition="'$(ExecutableSourceProjectFullPath)' != ''">
      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
      <SkipGetTargetFrameworkProperties>true</SkipGetTargetFrameworkProperties>
    </ProjectReference>
  </ItemGroup>

  <Target Name="_ValidatePackExecutableProperties">
    <Error Text="Missing ExecutableProjectReference."
           Condition="('$(PackAsExecutable)' == 'Publish' Or '$(PackAsExecutable)' == 'Package') And '$(ExecutableProjectReference)' == ''" />
  </Target>

  <!--<Target Name="BuildExecutableProjectReference" BeforeTargets="Pack"
          Condition="'$(PackAsExecutable)' == 'Publish'">
    <PropertyGroup>
      <_ExecutableProjectReferenceMSBuildProperties>@(ExecutableProjectReferenceMSBuildProperties->'-p:&quot;%(Identity)=%(Value)&quot;', ' ')</_ExecutableProjectReferenceMSBuildProperties>
      <_Command>dotnet msbuild &quot;$(ExecutableSourceProjectFullPath)&quot; -t:build $(_ExecutableProjectReferenceMSBuildProperties)</_Command>
    </PropertyGroup>
  
    <Message Text="[$(MSBuildThisFileName)] Execute &quot;$(_Command)&quot;" Importance="normal" />
    <Exec Command="$(_Command)" />
  </Target>-->

  <!--
  =====================================================
                  TfmSpecificExecutableContentInPackage
  
  This target publishes the MSBuild project to 
  $(PublishDir).
  =====================================================
  -->
  <Target Name="PublishTfmSpecificExecutableAsProjectContent" Condition="'$(PackAsExecutable)' == 'Project'">

    <PropertyGroup>
      <_ProjectFile Condition="'$(PackAsExecutable)' == 'Project'">$(MSBuildProjectFullPath)</_ProjectFile>
    </PropertyGroup>

    <MSBuild Projects="$(_ProjectFile)" Targets="Publish" Properties="TargetFramework=$(TargetFramework)" />

  </Target>

  <!--
  =====================================================
     TfmSpecificExecutableSourceProjectContentInPackage
                                       
  This target is initially called by target
  TfmSpecificContentInPackage. This target includes the
  published files to the nuget package.
  =====================================================
  -->
  <Target Name="TfmSpecificExecutableSourceProjectContentInPackage" DependsOnTargets="PublishTfmSpecificExecutableAsProjectContent" Condition="'$(PackAsExecutable)' == 'Project'">

    <PropertyGroup>
      <_PublishDir Condition="'$(PackAsExecutable)' == 'Project'">$(MSBuildProjectDir)$(PublishDir)</_PublishDir>
    </PropertyGroup>

    <ItemGroup>
      <TfmSpecificPackageFile Include="$(_PublishDir)**\*">
        <PublishDir>$(_PublishDir)</PublishDir>
        <PackagePath>executables\$(TargetFramework)\%(RecursiveDir)%(Filename)%(Extension)</PackagePath>
      </TfmSpecificPackageFile>
    </ItemGroup>

  </Target>

  <Target Name="PackExecutableSourceProject" DependsOnTargets="$(GenerateNuspecDependsOn)" Condition="'$(PackAsExecutable)' == 'Project'" Outputs="@(_ExecutablePackageFiles)">
    <ItemGroup>
      <_ExecutablePackageFiles Include="$([System.IO.Path]::GetFullPath('%(_PackageFiles.Identity)'))">
        <NuGetRecursiveDir>%(_PackageFiles.NuGetRecursiveDir)</NuGetRecursiveDir>
        <BuildAction>%(_PackageFiles.BuildAction)</BuildAction>
        <PackagePath>%(_PackageFiles.PackagePath)</PackagePath>
      </_ExecutablePackageFiles>
    </ItemGroup>
  </Target>

  <Target Name="TfmSpecificExecutablePackageProjectContentInPackage" Condition="'$(PackAsExecutable)' == 'Package'" />

  <!--
  =====================================================
                          BuildExecutablePackageProject
  
  
  =====================================================
   -->
  <Target Name="IncludeExecutableSourceProjectPackageFiles" DependsOnTargets="_ReadExecutableSourceProjectProperties" Condition="'$(PackAsExecutable)' == 'Package'">

    <MSBuild Projects="$(ExecutableSourceProjectFullPath)" Targets="PackExecutableSourceProject">
      <Output TaskParameter="TargetOutputs" ItemName="_ExecutablePackageFiles"/>
    </MSBuild>

    <ItemGroup>
      <!-- Add executable project files to executable package project -->
      <_PackageFiles Include="@(_ExecutablePackageFiles)" />
    </ItemGroup>

  </Target>

  <Target Name="_CalculateSettingsForExecutablePackageProjectPublishment">
    <PropertyGroup>
      <_ExecutablePublishProjectOutputPath Condition="'$(PackagePublishmentOutputPath)' != ''">$(PackagePublishmentOutputPath.TrimEnd('\'))</_ExecutablePublishProjectOutputPath>
      <_ExecutablePublishProjectOutputPath Condition="'$(PackagePublishmentOutputPath)' == ''">$(MSBuildProjectDirectory)\bin\$(Configuration)\package</_ExecutablePublishProjectOutputPath>
    </PropertyGroup>
  </Target>

  <!--
  =====================================================
                         BuildExecutablePublishProject
                                       
  Unzips a project defined in ExecutableSourceProjectFullPath
  (calulcated from ExecutableProjectReference).
  =====================================================
  -->
  <Target Name="BuildExecutablePublishProject" DependsOnTargets="_CalculateSettingsForExecutablePackageProjectPublishment" BeforeTargets="Pack" Condition="'$(PackAsExecutable)' == 'Publish'">

    <PropertyGroup>

      <PackageId>$([System.Guid]::NewGuid())</PackageId>
      <PackageVersion>1.0.0</PackageVersion>

      <PackAsExecutableMSBuildProperties>
        PackAsExecutable=Project;
        PackageId=$(PackageId);
        PackageVersion=$(PackageVersion);
        PackageOutputPath=$(_ExecutablePublishProjectOutputPath);
        IsPackable=true;
        $(PackAsExecutableMSBuildProperties)
      </PackAsExecutableMSBuildProperties>

    </PropertyGroup>

    <MSBuild Projects="$(ExecutableSourceProjectFullPath)" Targets="Pack" Properties="$(PackAsExecutableMSBuildProperties)" />

    <PropertyGroup>
      <_NugetFilePath>$(_ExecutablePublishProjectOutputPath)\$(PackageId).$(PackageVersion).nupkg</_NugetFilePath>
    </PropertyGroup>

    <Unzip SourceFiles="$(_NugetFilePath)" DestinationFolder="$(_ExecutablePublishProjectOutputPath)" />
    <Delete Files="$(NugetFilePath)" />

  </Target>
  
  <!--
  =====================================================
                         CleanExecutablePublishProject
                                       
  Cleans the unzipped and packed as executable package.
  =====================================================
  -->
  <Target Name="CleanExecutablePublishProject" DependsOnTargets="_CalculateSettingsForExecutablePackageProjectPublishment" AfterTargets="Clean" Condition="'$(PackAsExecutable)' == 'Publish'">
    <ItemGroup>
      <_PackageFiles Include="$(_ExecutablePublishProjectOutputPath)\**\*" />
    </ItemGroup>

    <Delete Files="@(_PackageFiles)" />
    <RemoveDir Directories="$(_ExecutablePublishProjectOutputPath)" />
  </Target>

  <!--<Target Name="CleanExecutableSourceProject" AfterTargets="CleanExecutablePublishProject" Condition="'$(PackAsExecutable)' == 'Publish' Or '$(PackAsExecutable)' == 'Package'">
    <MSBuild Projects="$(ExecutableSourceProjectFullPath)" Targets="Clean" />
  </Target>-->

  <!--
  =====================================================
                               CollectProjectProperties
  Outputs PackExecutable relevant projects properties.
  =====================================================
  -->
  <Target Name="GetExecutableProjectProperties" DependsOnTargets="$(GetExecutableProjectPropertiesDependsOn)" Outputs="$(ExecutableProjectProperties)">
    <PropertyGroup>
      <_S>$(ExecutableProjectPropertySeparator)</_S>
      <!-- List separator: https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild-special-characters?view=vs-2019 -->
      <!--TargetFrameworks=$(TargetFrameworks)$(_S)?-->
      <ExecutableProjectProperties>?AssemblyName=$(AssemblyName)$(_S)?PackageId=$(PackageId)$(_S)?PackageVersion=$(PackageVersion)$(_S)?PublishDir=$(PublishDir)$(_S)?TargetFramework=$(TargetFramework)$(_S)?Description=$([MSBuild]::Escape('$(Description)'))</ExecutableProjectProperties>
    </PropertyGroup>

    <Message Text="Following executable project properties has been gathered:" Importance="high" />
    <Message Text="$(ExecutableProjectProperties)" Importance="high" />
  </Target>

  <Target Name="_ApplyExecutableSourceProjectProperties" DependsOnTargets="_ReadExecutableSourceProjectProperties" BeforeTargets="GenerateNuspec;_GetProjectVersion" Condition="'$(PackAsExecutable)' == 'Package'">

    <PropertyGroup>
      <PackageDescription Condition="'$(ExecutableProjectDiscription)' != ''">$(ExecutableProjectDiscription)</PackageDescription>
    </PropertyGroup>

    <PropertyGroup>
      <PackageVersion>$(ExecutableProjectPackageVersion)</PackageVersion>
    </PropertyGroup>

  </Target>

  <Target Name="_ReadExecutableSourceProjectProperties" Condition="'$(PackAsExecutable)' == 'Package'">

    <PropertyGroup>
      <_MSBuildRemoveProperties>TargetFramework;TargetFrameworks</_MSBuildRemoveProperties>
    </PropertyGroup>

    <MSBuild Projects="$(ExecutableSourceProjectFullPath)" Targets="GetExecutableProjectProperties" RemoveProperties="$(_MSBuildRemoveProperties)">
      <Output TaskParameter="TargetOutputs" PropertyName="_ExecutableProjectProperties" />
    </MSBuild>

    <PropertyGroup>

      <_MSBuildProperties>
        PropertyNamePrefix=?;
        PropertySeparator=$(ExecutableProjectPropertySeparator);
        CommaSeparatedProperties=$(_ExecutableProjectProperties)
      </_MSBuildProperties>

    </PropertyGroup>

    <MSBuild Projects="$(TeronisMSBuildPackagingPackExecutableTargetsFile)" Targets="GetPropertyValue" Properties="$(_MSBuildProperties);PropertyName=PackageVersion" RemoveProperties="$(_MSBuildRemoveProperties)">
      <Output TaskParameter="TargetOutputs" PropertyName="ExecutableProjectPackageVersion" />
    </MSBuild>

    <MSBuild Projects="$(TeronisMSBuildPackagingPackExecutableTargetsFile)" Targets="GetPropertyValue" Properties="$(_MSBuildProperties);PropertyName=PublishDir" RemoveProperties="$(_MSBuildRemoveProperties)">
      <Output TaskParameter="TargetOutputs" PropertyName="ExecutableProjectPublishDir" />
    </MSBuild>

    <MSBuild Projects="$(TeronisMSBuildPackagingPackExecutableTargetsFile)" Targets="GetPropertyValue" Properties="$(_MSBuildProperties);PropertyName=TargetFramework" RemoveProperties="$(_MSBuildRemoveProperties)">
      <Output TaskParameter="TargetOutputs" PropertyName="ExecutableProjectTargetFramework" />
    </MSBuild>

    <!--<MSBuild Projects="$(TeronisMSBuildPackagingPackExecutableTargetsFile)" Targets="GetPropertyValue" Properties="$(_MSBuildProperties);PropertyName=TargetFrameworks" RemoveProperties="$(_MSBuildRemoveProperties)">
      <Output TaskParameter="TargetOutputs" PropertyName="ExecutableProjectTargetFrameworks" />
    </MSBuild>-->

    <MSBuild Projects="$(TeronisMSBuildPackagingPackExecutableTargetsFile)" Targets="GetPropertyValue" Properties="$(_MSBuildProperties);PropertyName=Description" RemoveProperties="$(_MSBuildRemoveProperties)">
      <Output TaskParameter="TargetOutputs" PropertyName="ExecutableProjectDiscription" />
    </MSBuild>

    <PropertyGroup>
      <ExecutableProjectDiscription>$([MSBuild]::Unescape('$(ExecutableProjectDiscription)'))</ExecutableProjectDiscription>
    </PropertyGroup>

  </Target>

  <!-- 
  =====================================================
  Target gets the value of a property within comma
  separated properties.
  
  Required:
    CommaSeparatedProperties:
      The string with key value pairs separated by 
      semicolons.
    PropertyName: 
      The name of the property.
    (Optional) PropertyNamePrefix:
      Can be any char or string.
    (Optional) PropertySeparator:
      The char that separats the property value pairs.
      It is ';' by default.
    (Optional) GetPropertyValueDebug: 
      If true debug information is shown.
  =====================================================
  -->
  <Target Name="GetPropertyValue" Outputs="$(_PropertyValue)">

    <PropertyGroup>
      <_PropertySeparator Condition="'$(PropertySeparator)' != ''">$(PropertySeparator)</_PropertySeparator>
      <_PropertySeparator Condition="'$(_PropertySeparator)' == ''">;</_PropertySeparator>
    </PropertyGroup>

    <Message Text="[$(MSBuildThisFile)] Received properties $(CommaSeparatedProperties)" Importance="high" Condition="'$(GetPropertyValueDebug)' == 'true'" />

    <PropertyGroup>
      <_PropertyName>$(PropertyNamePrefix)$(PropertyName)=</_PropertyName>
    </PropertyGroup>

    <PropertyGroup>
      <_PropertyLength>$(_PropertyName.Length)</_PropertyLength>
    </PropertyGroup>

    <Message Text="[$(MSBuildThisFile)] _PropertyLength: $(_PropertyLength)" Importance="high" Condition="'$(GetPropertyValueDebug)' == 'true'" />

    <PropertyGroup>
      <_PropertyIndex>$(CommaSeparatedProperties.IndexOf('$(_PropertyName)'))</_PropertyIndex>
    </PropertyGroup>

    <Message Text="[$(MSBuildThisFile)] _PropertyIndex: $(_PropertyIndex)" Importance="high" Condition="'$(GetPropertyValueDebug)' == 'true'" />

    <PropertyGroup>
      <_PropertyValueIndex>$([MSBuild]::Add($(_PropertyIndex),$(_PropertyName.Length)))</_PropertyValueIndex>
    </PropertyGroup>

    <Message Text="[$(MSBuildThisFile)] _PropertyValueIndex: $(_PropertyValueIndex)" Importance="high" Condition="'$(GetPropertyValueDebug)' == 'true'" />

    <PropertyGroup>
      <_PropertySemicolonIndex>$(CommaSeparatedProperties.IndexOf($(_PropertySeparator),$(_PropertyValueIndex)))</_PropertySemicolonIndex>
    </PropertyGroup>

    <Message Text="[$(MSBuildThisFile)] _PropertySemicolonIndex: $(_PropertySemicolonIndex)" Importance="high" Condition="'$(GetPropertyValueDebug)' == 'true'" />

    <PropertyGroup>
      <_IsPropertySemicolonIndexNegative>false</_IsPropertySemicolonIndexNegative>
      <_IsPropertySemicolonIndexNegative Condition="'$(_PropertySemicolonIndex)' == '-1'">true</_IsPropertySemicolonIndexNegative>
      <_PropertySemicolonIndex Condition="$(_IsPropertySemicolonIndexNegative)">$(CommaSeparatedProperties.Length)</_PropertySemicolonIndex>
    </PropertyGroup>

    <Message Text="[$(MSBuildThisFile)] _PropertySemicolonIndex is now $(_PropertySemicolonIndex)" Importance="high" Condition="$(_IsPropertySemicolonIndexNegative) And '$(GetPropertyValueDebug)' == 'true'" />

    <PropertyGroup>
      <_PropertyValueLength>$([MSBuild]::Subtract($(_PropertySemicolonIndex),$(_PropertyValueIndex)))</_PropertyValueLength>
    </PropertyGroup>

    <Message Text="[$(MSBuildThisFile)] _PropertyValueLength: $(_PropertyValueLength)" Importance="high" Condition="'$(GetPropertyValueDebug)' == 'true'" />

    <PropertyGroup>
      <_PropertyValue>$(CommaSeparatedProperties.SubString($(_PropertyValueIndex),$(_PropertyValueLength)))</_PropertyValue>
    </PropertyGroup>

    <Message Text="[$(MSBuildThisFile)] _PropertyValue: $(_PropertyValue)" Importance="high" Condition="'$(GetPropertyValueDebug)' == 'true'" />

  </Target>

</Project>

<Project InitialTargets="_PrintExecutableProjectInformations">

  <Import Project="$(MSBuildThisFileDirectory)$(MSBuildThisFileName).props" Condition="'$(TeronisMSBuildPackagingPackExecutableHasBeenImported)' != 'true'"/>
  <Import Project="$(MSBuildThisFileDirectory)Teronis.MSBuild.Packaging.ShadowProject.targets" Condition="'$(TeronisMSBuildPackagingPackExecutableShadowProjectTargetsHasBeenImported)' != 'true'"/>

  <PropertyGroup>
    
    <TargetsForTfmSpecificContentInPackage>$(TargetsForTfmSpecificContentInPackage);$(TargetsForTfmSpecificExecutableSourceProjectContentInPackage);$(TargetsForTfmSpecificExecutablePackageProjectContentInPackage)</TargetsForTfmSpecificContentInPackage>

    <IsExecutablePublishTyped>false</IsExecutablePublishTyped>
    <IsExecutablePublishTyped Condition="'$(PackExecutableAs)' == 'Publish'">true</IsExecutablePublishTyped>

    <IsExecutablePackageTyped>false</IsExecutablePackageTyped>
    <IsExecutablePackageTyped Condition="'$(PackExecutableAs)' == 'Package'">true</IsExecutablePackageTyped>

    <!--It is not executable target typed if not typed as publish or package .-->
    <IsExecutableTargetTyped>false</IsExecutableTargetTyped>
    <IsExecutableTargetTyped Condition="'$(IsExecutablePublishTyped)' == 'true' Or '$(IsExecutablePackageTyped)' == 'true'">true</IsExecutableTargetTyped>

    <IsExecutableSourceTyped>false</IsExecutableSourceTyped>
    <IsExecutableSourceTyped Condition="'$(PackExecutableAs)' == 'Project'">true</IsExecutableSourceTyped>

    <HasAnyExecutableProjectType>false</HasAnyExecutableProjectType>
    <HasAnyExecutableProjectType Condition="'$(IsExecutableTargetTyped)' == 'true' Or '$(IsExecutableSourceTyped)' == 'true'">true</HasAnyExecutableProjectType>

    <_ExecutableProjectReference Condition="'$(IsExecutableTargetTyped)' == 'true' And '$(ExecutableProjectReference)' != ''">$(ExecutableProjectReference)</_ExecutableProjectReference>
    <_ExecutableProjectReference Condition="'$(IsExecutableTargetTyped)' == 'true' And '$(ExecutableProjectReference)' == ''">$(MSBuildProjectFullPath)</_ExecutableProjectReference>
    <_ExecutableProjectReference Condition="'$(IsExecutableSourceTyped)' == 'true'">$(MSBuildProjectFullPath)</_ExecutableProjectReference>
    
  </PropertyGroup>
  
  <PropertyGroup Condition="'$(HasAnyExecutableProjectType)' == 'true'">

    <NoPackageAnalysis>true</NoPackageAnalysis>
    <IncludeBuildOutput>false</IncludeBuildOutput>

    <ExecutableSourceProjectPathIsRooted>$([System.IO.Path]::IsPathRooted('$(_ExecutableProjectReference)'))</ExecutableSourceProjectPathIsRooted>
    <ExecutableSourceProjectFullPath Condition="$(ExecutableSourceProjectPathIsRooted)" >$(_ExecutableProjectReference)</ExecutableSourceProjectFullPath>

    <ExecutableSourceProjectFullPath Condition="!$(ExecutableSourceProjectPathIsRooted)" >$(MSBuildProjectDirectory)\$(_ExecutableProjectReference)</ExecutableSourceProjectFullPath>
    <ExecutableSourceProjectFullPath Condition="!$(ExecutableSourceProjectPathIsRooted)" >$([System.IO.Path]::GetFullPath('$(ExecutableSourceProjectFullPath)'))</ExecutableSourceProjectFullPath>

    <ExecutableSourceProjectFilename>$([System.IO.Path]::GetFileNameWithoutExtension('$(ExecutableSourceProjectFullPath)'))</ExecutableSourceProjectFilename>
    <ExecutableSourceProjectFullName>$([System.IO.Path]::GetFileName('$(ExecutableSourceProjectFullPath)'))</ExecutableSourceProjectFullName>
    <ExecutableSourceProjectDirectory>$([System.IO.Path]::GetDirectoryName('$(ExecutableSourceProjectFullPath)'))</ExecutableSourceProjectDirectory>

    <!-- Is ExecutableProjectReference a self dependency? -->
    <ExecutableProjectIsCircularDependency>false</ExecutableProjectIsCircularDependency>
    <ExecutableProjectIsCircularDependency Condition="'$(ExecutableSourceProjectFullPath)' == '$(MSBuildProjectFullPath)'">true</ExecutableProjectIsCircularDependency>

  </PropertyGroup>

  <Target Name="_PrintExecutableProjectInformations" Condition="'$(HasAnyExecutableProjectType)' == 'true'">
    <Message Text="[$(MSBuildThisFileName)] PackExecutableAs: $(PackExecutableAs) SourceProject: $(ExecutableSourceProjectFullName)" Importance="high" />
  </Target>

  <!-- Settings only when executable project is not pointing to itself. -->
  <PropertyGroup Condition="('$(IsExecutableTargetTyped)' == 'true')
                 And '$(ExecutableProjectIsCircularDependency)' != 'true'">
    <EnableDefaultCompileItems>false</EnableDefaultCompileItems>
    <EnableDefaultEmbeddedResourceItems>false</EnableDefaultEmbeddedResourceItems>
  </PropertyGroup>

  <PropertyGroup Condition="'$(IsExecutableSourceTyped)' == 'true'">
  </PropertyGroup>

  <PropertyGroup Condition="'$(IsExecutablePublishTyped)' == 'true'">
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <IsPackable>false</IsPackable>

    <!-- There is a bug that msbuild is still generating the assembly info. -->
    <!--<GenerateAssemblyInfo>false</GenerateAssemblyInfo>-->
    <!--<DisableImplicitFrameworkReferences>true</DisableImplicitFrameworkReferences>-->
  </PropertyGroup>

  <PropertyGroup Condition="'$(IsExecutablePackageTyped)' == 'true'">
    <!-- Mark as executable source project if target project is source project. -->
    <IsExecutableSourceTyped Condition="'$(ExecutableProjectIsCircularDependency)' == 'true'">true</IsExecutableSourceTyped>
    <PackageId>$(ExecutableSourceProjectFilename)</PackageId>
    <!-- See above -->
    <!--<GenerateAssemblyInfo>false</GenerateAssemblyInfo>-->
    <!--<DisableImplicitFrameworkReferences>true</DisableImplicitFrameworkReferences>-->
    <GenerateNuspecDependsOn>$(GenerateNuspecDependsOn);$(GenerateNuspecWhenPackingExecutablePackageProjectDependsOn)</GenerateNuspecDependsOn>
  </PropertyGroup>

  <ItemGroup>
    <ProjectReference Include="$(ExecutableSourceProjectFullPath)"
                      Condition="'$(ExecutableSourceProjectFullPath)' != '' And !$(ExecutableProjectIsCircularDependency)">
      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
      <SkipGetTargetFrameworkProperties>true</SkipGetTargetFrameworkProperties>
      <AdditionalProperties>$(ExecutableProjectReferenceMSBuildProperties)</AdditionalProperties>
    </ProjectReference>
  </ItemGroup>

  <PropertyGroup>
    <PackExecutableMSBuildProperties>
      ParentPacksExecutableAs=$(PackExecutableAs);
      ParentIsExecutablePublishTyped=$(IsExecutablePublishTyped);
      ParentIsExecutablePackageTyped=$(IsExecutablePackageTyped);
      ParentIsExecutableTargetTyped=$(IsExecutableTargetTyped);
      ParentIsExecutableSourceTyped=$(IsExecutableSourceTyped);
      ParentHasAnyExecutableProjectType=$(HasAnyExecutableProjectType);
      ParentExecutableProjectReference=$(ParentExecutableProjectReference)
    </PackExecutableMSBuildProperties>
</PropertyGroup>

  <!--
  =====================================================
                  TfmSpecificExecutableContentInPackage
  
  This target publishes the MSBuild project to 
  $(PublishDir).
  =====================================================
  -->
  <Target Name="PublishTfmSpecificExecutableAsProjectContent" Condition="'$(IsExecutableSourceTyped)' == 'true'">

    <PropertyGroup>
      <_ProjectFile>$(MSBuildProjectFullPath)</_ProjectFile>
    </PropertyGroup>

    <MSBuild Projects="$(_ProjectFile)" Targets="Publish" Properties="TargetFramework=$(TargetFramework)" />

  </Target>

  <!--<Target Name=""-->  

  <Target Name="CollectExecutableSourceProjectPackageFiles" DependsOnTargets="$(GenerateNuspecDependsOn)" Condition="'$(IsExecutableSourceTyped)' == 'true'"
          Outputs="@(_ExecutablePackageFiles)">
    <ItemGroup>
      <_ExecutablePackageFiles Include="$([System.IO.Path]::GetFullPath('%(_PackageFiles.Identity)'))">
        <NuGetRecursiveDir>%(_PackageFiles.NuGetRecursiveDir)</NuGetRecursiveDir>
        <BuildAction>%(_PackageFiles.BuildAction)</BuildAction>
        <PackagePath>%(_PackageFiles.PackagePath)</PackagePath>
      </_ExecutablePackageFiles>
    </ItemGroup>
  </Target>

  <Target Name="TfmSpecificExecutablePackageProjectContentInPackage" Condition="'$(IsExecutablePackageTyped)' == 'true'" />
  
  <!--
  =====================================================
                          BuildExecutablePackageProject
  
  Includes package files from executable source
  project but only if executable project is not
  itself to prevent circular target dependency.
  =====================================================
   -->
  <Target Name="IncludeExecutableSourceProjectPackageFiles" DependsOnTargets="_ReadExecutableSourceProjectProperties"
          Condition="'$(IsExecutablePackageTyped)' == 'true' And !$(ExecutableProjectIsCircularDependency)">

    <MSBuild Projects="$(ExecutableSourceProjectFullPath)" Targets="CollectExecutableSourceProjectPackageFiles">
      <Output TaskParameter="TargetOutputs" ItemName="_ExecutablePackageFiles"/>
    </MSBuild>
    
    <ItemGroup>
      <!-- Add executable project files to executable package project -->
      <_PackageFiles Include="@(_ExecutablePackageFiles)" />
    </ItemGroup>

  </Target>

  <Target Name="_CalculateSettingsForExecutablePackageProjectPublishment">
    <PropertyGroup>
      <_ExecutablePublishProjectOutputPath Condition="'$(PackagePublishmentOutputPath)' != ''">$(PackagePublishmentOutputPath.TrimEnd('\'))</_ExecutablePublishProjectOutputPath>
      <_ExecutablePublishProjectOutputPath Condition="'$(PackagePublishmentOutputPath)' == ''">$(MSBuildProjectDirectory)\bin\$(Configuration)\PackExecutable\publish</_ExecutablePublishProjectOutputPath>
    </PropertyGroup>
  </Target>

  <!--
  =====================================================
              PackSourceWhenPackingPublishTypedProject
                                       
  Unzips a project defined in
  ExecutableSourceProjectFullPath (calulcated from
  ExecutableProjectReference).
  =====================================================
  -->
  <Target Name="PackSourceWhenPackingPublishTypedProject" DependsOnTargets="_CalculateSettingsForExecutablePackageProjectPublishment" BeforeTargets="Pack"
          Condition="'$(IsExecutablePublishTyped)' == 'true'">

    <PropertyGroup>

      <PackageId>$([System.Guid]::NewGuid())</PackageId>
      <PackageVersion>1.0.0</PackageVersion>

      <PackSourceWhenPackingPublishTypedProjectMSBuildProperties>
        $(PackExecutableMSBuildProperties);
        PackExecutableAs=Project;
        PackageId=$(PackageId);
        PackageVersion=$(PackageVersion);
        PackageOutputPath=$(_ExecutablePublishProjectOutputPath);
        IsPackable=true;
        $(PackSourceWhenPackingPublishTypedProjectMSBuildProperties)
      </PackSourceWhenPackingPublishTypedProjectMSBuildProperties>

    </PropertyGroup>

    <MSBuild Projects="$(ExecutableSourceProjectFullPath)" Targets="Pack" Properties="$(PackSourceWhenPackingPublishTypedProjectMSBuildProperties)" />

    <PropertyGroup>
      <_NugetFilePath>$(_ExecutablePublishProjectOutputPath)\$(PackageId).$(PackageVersion).nupkg</_NugetFilePath>
    </PropertyGroup>

    <Unzip SourceFiles="$(_NugetFilePath)" DestinationFolder="$(_ExecutablePublishProjectOutputPath)" />
    <Delete Files="$(_NugetFilePath)" />

  </Target>

  <!--
  =====================================================
     TfmSpecificExecutableSourceProjectContentInPackage
                                       
  This target is initially called by target
  TfmSpecificContentInPackage. This target includes the
  published files to the nuget package.
  =====================================================
  -->
  <Target Name="TfmSpecificExecutableSourceProjectContentInPackage" DependsOnTargets="PublishTfmSpecificExecutableAsProjectContent"
          Condition="'$(IsExecutableSourceTyped)' == 'true'">

    <PropertyGroup>
      <_PublishDir Condition="'$(IsExecutableSourceTyped)' == 'true'">$(MSBuildProjectDir)$(PublishDir)</_PublishDir>
    </PropertyGroup>

    <ItemGroup>

      <_PublishedFiles Include="$(_PublishDir)**\*" />

      <!--https://github.com/NuGet/NuGet.Client/blob/ad08bc710b3c4e142040f4efc860c003502aee3e/src/NuGet.Core/NuGet.Build.Tasks.Pack/NuGet.Build.Tasks.Pack.targets#L427-->
      <!--<NuGetRecursiveDir>%(_PublishedFiles.RecursiveDir)</NuGetRecursiveDir>-->
      <TfmSpecificPackageFileWithRecursiveDir Include="@(_PublishedFiles)">
        <PublishDir>$(_PublishDir)</PublishDir>
        <PackagePath>executables\$(TargetFramework)\%(_PublishedFiles.RecursiveDir)%(Filename)%(Extension)</PackagePath>
        <BuildAction></BuildAction>
      </TfmSpecificPackageFileWithRecursiveDir>

    </ItemGroup>

    <Message Text="- FN: %(TfmSpecificPackageFileWithRecursiveDir.Filename)%(TfmSpecificPackageFileWithRecursiveDir.Extension) RD: %(TfmSpecificPackageFileWithRecursiveDir.RecursiveDir)" Importance="high" />

  </Target>

  <!--<Target Name="_AfterGetTfmSpecificContentForPackage" BeforeTargets="_GetTfmSpecificContentForPackage" Condition="'$(IsExecutableSourceTyped)' == 'true'" />-->

  <!--
  =====================================================
                         CleanExecutablePublishProject
                                       
  Cleans the unzipped and packed as executable package.
  =====================================================
  -->
  <Target Name="CleanExecutablePublishProject" DependsOnTargets="_CalculateSettingsForExecutablePackageProjectPublishment" BeforeTargets="Clean"
          Condition="'$(IsExecutableTargetTyped)' == 'true'">
    <ItemGroup>
      <_PackageFiles Include="$(_ExecutablePublishProjectOutputPath)\**\*" />
    </ItemGroup>

    <Delete Files="@(_PackageFiles)" />
    <RemoveDir Directories="$(_ExecutablePublishProjectOutputPath)" />
  </Target>

  <Target Name="CleanExecutableSourceProject" BeforeTargets="Clean"
          Condition="'$(IsExecutableTargetTyped)' == 'true' And '$(ExecutableProjectIsCircularDependency)' != 'true'">
    <MSBuild Projects="$(ExecutableSourceProjectFullPath)" Targets="Clean" />
  </Target>

  <Target Name="_ApplyExecutableSourceProjectProperties" DependsOnTargets="_ReadExecutableSourceProjectProperties" BeforeTargets="GenerateNuspec;_GetProjectVersion"
          Condition="'$(IsExecutablePackageTyped)' == 'true'">

    <PropertyGroup>
      <PackageDescription Condition="'$(ExecutableProjectDiscription)' != ''">$(ExecutableProjectDiscription)</PackageDescription>
    </PropertyGroup>

    <PropertyGroup>
      <PackageVersion>$(ExecutableProjectPackageVersion)</PackageVersion>
    </PropertyGroup>

  </Target>

  <Target Name="_ReadExecutableSourceProjectProperties" Condition="'$(IsExecutablePackageTyped)' == 'true'">

    <PropertyGroup>
      <_MSBuildRemoveProperties>TargetFramework;TargetFrameworks</_MSBuildRemoveProperties>
    </PropertyGroup>

    <MSBuild Projects="$(ExecutableSourceProjectFullPath)" Targets="GetExecutableSourceProjectProperties"
             Properties="$(PackExecutableMSBuildProperties)"
             RemoveProperties="$(_MSBuildRemoveProperties)">
      <Output TaskParameter="TargetOutputs" PropertyName="_ExecutableProjectProperties" />
    </MSBuild>

    <PropertyGroup>

      <_MSBuildProperties>
        PropertyNamePrefix=?;
        PropertySeparator=$(ExecutableProjectPropertySeparator);
        CommaSeparatedProperties=$(_ExecutableProjectProperties)
      </_MSBuildProperties>

    </PropertyGroup>

    <MSBuild Projects="$(TeronisMSBuildPackagingPackExecutableTargetsFile)" Targets="GetPropertyValue" Properties="$(_MSBuildProperties);PropertyName=PackageVersion" RemoveProperties="$(_MSBuildRemoveProperties)">
      <Output TaskParameter="TargetOutputs" PropertyName="ExecutableProjectPackageVersion" />
    </MSBuild>

    <MSBuild Projects="$(TeronisMSBuildPackagingPackExecutableTargetsFile)" Targets="GetPropertyValue" Properties="$(_MSBuildProperties);PropertyName=PublishDir" RemoveProperties="$(_MSBuildRemoveProperties)">
      <Output TaskParameter="TargetOutputs" PropertyName="ExecutableProjectPublishDir" />
    </MSBuild>

    <MSBuild Projects="$(TeronisMSBuildPackagingPackExecutableTargetsFile)" Targets="GetPropertyValue" Properties="$(_MSBuildProperties);PropertyName=TargetFramework" RemoveProperties="$(_MSBuildRemoveProperties)">
      <Output TaskParameter="TargetOutputs" PropertyName="ExecutableProjectTargetFramework" />
    </MSBuild>

    <!--<MSBuild Projects="$(TeronisMSBuildPackagingPackExecutableTargetsFile)" Targets="GetPropertyValue" Properties="$(_MSBuildProperties);PropertyName=TargetFrameworks" RemoveProperties="$(_MSBuildRemoveProperties)">
      <Output TaskParameter="TargetOutputs" PropertyName="ExecutableProjectTargetFrameworks" />
    </MSBuild>-->

    <MSBuild Projects="$(TeronisMSBuildPackagingPackExecutableTargetsFile)" Targets="GetPropertyValue" Properties="$(_MSBuildProperties);PropertyName=Description" RemoveProperties="$(_MSBuildRemoveProperties)">
      <Output TaskParameter="TargetOutputs" PropertyName="ExecutableProjectDiscription" />
    </MSBuild>

    <PropertyGroup>
      <ExecutableProjectDiscription>$([MSBuild]::Unescape('$(ExecutableProjectDiscription)'))</ExecutableProjectDiscription>
    </PropertyGroup>

  </Target>

  <!--
  =====================================================
                               CollectProjectProperties
  Outputs PackExecutable relevant projects properties.
  =====================================================
  -->
  <Target Name="GetExecutableSourceProjectProperties" DependsOnTargets="$(GetExecutableSourceProjectPropertiesDependsOn)" Outputs="$(ExecutableProjectProperties)">
    <PropertyGroup>
      <_S>$(ExecutableProjectPropertySeparator)</_S>
      <!-- List separator: https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild-special-characters?view=vs-2019 -->
      <!--TargetFrameworks=$(TargetFrameworks)$(_S)?-->
      <ExecutableProjectProperties>?AssemblyName=$(AssemblyName)$(_S)?PackageId=$(PackageId)$(_S)?PackageVersion=$(PackageVersion)$(_S)?PublishDir=$(PublishDir)$(_S)?TargetFramework=$(TargetFramework)$(_S)?Description=$([MSBuild]::Escape('$(Description)'))</ExecutableProjectProperties>
    </PropertyGroup>

    <Message Text="Following executable project properties has been gathered:" Importance="high" />
    <Message Text="$(ExecutableProjectProperties)" Importance="high" />
  </Target>

  <!-- 
  =====================================================
  Target gets the value of a property within comma
  separated properties.
  
  Required:
    CommaSeparatedProperties:
      The string with key value pairs separated by 
      semicolons.
    PropertyName: 
      The name of the property.
    (Optional) PropertyNamePrefix:
      Can be any char or string.
    (Optional) PropertySeparator:
      The char that separats the property value pairs.
      It is ';' by default.
    (Optional) GetPropertyValueDebug: 
      If true debug information is shown.
  =====================================================
  -->
  <Target Name="GetPropertyValue" Outputs="$(_PropertyValue)">

    <PropertyGroup>
      <_PropertySeparator Condition="'$(PropertySeparator)' != ''">$(PropertySeparator)</_PropertySeparator>
      <_PropertySeparator Condition="'$(_PropertySeparator)' == ''">;</_PropertySeparator>
    </PropertyGroup>

    <Message Text="[$(MSBuildThisFile)] Received properties $(CommaSeparatedProperties)" Importance="high" Condition="'$(GetPropertyValueDebug)' == 'true'" />

    <PropertyGroup>
      <_PropertyName>$(PropertyNamePrefix)$(PropertyName)=</_PropertyName>
    </PropertyGroup>

    <PropertyGroup>
      <_PropertyLength>$(_PropertyName.Length)</_PropertyLength>
    </PropertyGroup>

    <Message Text="[$(MSBuildThisFile)] _PropertyLength: $(_PropertyLength)" Importance="high" Condition="'$(GetPropertyValueDebug)' == 'true'" />

    <PropertyGroup>
      <_PropertyIndex>$(CommaSeparatedProperties.IndexOf('$(_PropertyName)'))</_PropertyIndex>
    </PropertyGroup>

    <Message Text="[$(MSBuildThisFile)] _PropertyIndex: $(_PropertyIndex)" Importance="high" Condition="'$(GetPropertyValueDebug)' == 'true'" />

    <PropertyGroup>
      <_PropertyValueIndex>$([MSBuild]::Add($(_PropertyIndex),$(_PropertyName.Length)))</_PropertyValueIndex>
    </PropertyGroup>

    <Message Text="[$(MSBuildThisFile)] _PropertyValueIndex: $(_PropertyValueIndex)" Importance="high" Condition="'$(GetPropertyValueDebug)' == 'true'" />

    <PropertyGroup>
      <_PropertySemicolonIndex>$(CommaSeparatedProperties.IndexOf($(_PropertySeparator),$(_PropertyValueIndex)))</_PropertySemicolonIndex>
    </PropertyGroup>

    <Message Text="[$(MSBuildThisFile)] _PropertySemicolonIndex: $(_PropertySemicolonIndex)" Importance="high" Condition="'$(GetPropertyValueDebug)' == 'true'" />

    <PropertyGroup>
      <_IsPropertySemicolonIndexNegative>false</_IsPropertySemicolonIndexNegative>
      <_IsPropertySemicolonIndexNegative Condition="'$(_PropertySemicolonIndex)' == '-1'">true</_IsPropertySemicolonIndexNegative>
      <_PropertySemicolonIndex Condition="$(_IsPropertySemicolonIndexNegative)">$(CommaSeparatedProperties.Length)</_PropertySemicolonIndex>
    </PropertyGroup>

    <Message Text="[$(MSBuildThisFile)] _PropertySemicolonIndex is now $(_PropertySemicolonIndex)" Importance="high" Condition="$(_IsPropertySemicolonIndexNegative) And '$(GetPropertyValueDebug)' == 'true'" />

    <PropertyGroup>
      <_PropertyValueLength>$([MSBuild]::Subtract($(_PropertySemicolonIndex),$(_PropertyValueIndex)))</_PropertyValueLength>
    </PropertyGroup>

    <Message Text="[$(MSBuildThisFile)] _PropertyValueLength: $(_PropertyValueLength)" Importance="high" Condition="'$(GetPropertyValueDebug)' == 'true'" />

    <PropertyGroup>
      <_PropertyValue>$(CommaSeparatedProperties.SubString($(_PropertyValueIndex),$(_PropertyValueLength)))</_PropertyValue>
    </PropertyGroup>

    <Message Text="[$(MSBuildThisFile)] _PropertyValue: $(_PropertyValue)" Importance="high" Condition="'$(GetPropertyValueDebug)' == 'true'" />

  </Target>

</Project>

<Project>

  <PropertyGroup>
    <!-- Will be overwritten by GitVersionCache.MSBuild.Packaging.GitVersionCache. -->
    <MSBuildPackagingGitVersionProjectFile Condition="'$(MSBuildPackagingGitVersionProjectFile)' == ''">$(MSBuildThisFileDirectory)$(MSBuildProjectName).csproj</MSBuildPackagingGitVersionProjectFile>
  </PropertyGroup>

  <Import Sdk="Microsoft.NET.Sdk" Project="Sdk.props" Condition="'$(DisableSdkProps)' != 'true'" />

  <PropertyGroup>

    <!--<OutputType>Exe</OutputType>-->

    <!-- 
    # REMINDER: Change specific string condition in
    # ModuleInitializer if you change TargetFramework.
    -->
    <TargetFramework>netstandard2.0</TargetFramework>
    <RootNamespace>Teronis.GitVersionCache</RootNamespace>
    <Description>GitVersionCache is an improved implementation to GitVersionTask. It does support concurrency and nested GitVersion.yml relative to your .git folder.</Description>
    <!--<CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>-->

    <!-- We don't build an executable package. 
         We build an only-build-time package. -->
    <SuppressDependenciesWhenPacking>true</SuppressDependenciesWhenPacking>
    <DevelopmentDependency>true</DevelopmentDependency>
    <IncludeBuildOutput>false</IncludeBuildOutput>
    <IncludeSymbols>false</IncludeSymbols>

    <!--<AutoGenerateBindingRedirects>true</AutoGenerateBindingRedirects>
    <GenerateBindingRedirectsOutputType>true</GenerateBindingRedirectsOutputType>-->

    <!-- We only need the package reference for binaries. -->
    <DisableGitVersionTask>true</DisableGitVersionTask>
    <WriteVersionInfoToBuildLog>false</WriteVersionInfoToBuildLog>
    <UpdateAssemblyInfo>false</UpdateAssemblyInfo>
    <GenerateGitVersionInformation>false</GenerateGitVersionInformation>
    <GetVersion>false</GetVersion>

    <TargetsForTfmSpecificContentInPackage>$(TargetsForTfmSpecificContentInPackage);_PublishedProjectContentInPackage</TargetsForTfmSpecificContentInPackage>

  </PropertyGroup>

  <Import Sdk="Microsoft.NET.Sdk" Project="Sdk.targets" Condition="'$(DisableSdkProps)' != 'true'" />

  <ItemGroup>

    <ProjectReference Include="$(MSBuildThisFileDirectory)..\..\..\..\..\NetStandard\Core\Core\ref\GitVersionCache\GitVersionCache.NetStandard.Core.csproj">
      <AdditionalProperties>TargetFramework=$(TargetFramework)</AdditionalProperties>
    </ProjectReference>

    <ProjectReference Include="$(MSBuildThisFileDirectory)..\..\..\..\..\NetStandard\Json\Json\ref\GitVersionCache\GitVersionCache.NetStandard.Json.csproj" />
    <ProjectReference Include="$(MSBuildThisFileDirectory)..\..\..\..\..\NetStandard\Tools\GitVersion\GitVersion\ref\GitVersionCache\GitVersionCache.NetStandard.Tools.GitVersion.csproj" />
    <ProjectReference Include="$(MSBuildThisFileDirectory)..\..\..\..\Core\Core\ref\GitVersionCache\GitVersionCache.MSBuild.Core.csproj" />

  </ItemGroup>

  <ItemGroup>

    <PackageReference Include="GitVersion.CommandLine" Version="5.3.5">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>

    <PackageReference Include="Microsoft.Build.Utilities.Core" Version="16.6.0" PrivateAssets="all" />
    <PackageReference Include="Microsoft.Extensions.DependencyInjection" Version="3.1.5" />
    <PackageReference Include="Microsoft.Extensions.Options" Version="3.1.5" />
    <PackageReference Include="System.Text.Json" Version="4.7.2" />

  </ItemGroup>

  <PropertyGroup>

    <!--<GitVersionToolFilesIncludes>
      $(PkgGitVersionTask)\tools\**\*;
      $(PkgGitVersionTask)\tools\**\*;
      $(PkgGitVersionTask)\tools\**\*
    </GitVersionToolFilesIncludes>-->

    <FilesystemPublishmentDirectory>bin\$(Configuration)\netstandard2.0\filesystemPublish</FilesystemPublishmentDirectory>

  </PropertyGroup>

  <ItemGroup>

    <None Include="$(MSBuildThisFileDirectory)build\**\*" Pack="true" PackagePath="build">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>

    <None Include="$(MSBuildThisFileDirectory)build\**\*" Pack="true" PackagePath="buildMultiTargeting">
      <!-- Last link wins -->
      <Link>build\%(Filename)%(Extension)</Link>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>

  </ItemGroup>

  <Target Name="_PublishThisProject">

    <PropertyGroup>
      <PublishProjectMSBuildProperties>
        PublishProfile=GitVersionCachePreBuild.pubxml;
        Configuration=$(Configuration)
      </PublishProjectMSBuildProperties>
    </PropertyGroup>

    <MSBuild Projects="$(MSBuildPackagingGitVersionProjectFile)" Targets="Publish" Properties="$(PublishProjectMSBuildProperties)" />

  </Target>

  <!-- We depend on creation of filesystem publishment. -->
  <Target Name="_PublishedProjectContentInPackage" DependsOnTargets="_PublishThisProject">
    <!-- 
    # We have to include those files in this way, because 
    # <None Include=".." Pack="true" PackagePath=".." />
    # does only work if publish folder already exists at
    # the time where the target pack is called, so you
    # would have to pack twice to get desired package.
    -->
    <ItemGroup>
      <TfmSpecificPackageFile Include="$(FilesystemPublishmentDirectory)\*">
        <!-- When you change it, you have to adjust ContainerRootDirectory in ModuleInitializer. -->
        <PackagePath>GitVersionCache\netstandard2.0</PackagePath>
      </TfmSpecificPackageFile>
    </ItemGroup>
  </Target>

  <Target Name="CleanPublishToFilesystemBeforeClean" BeforeTargets="BeforeClean">
    <RemoveDir Directories="$(FilesystemPublishmentDirectory)" />
  </Target>

  <Import Project="$(TeronisMSBuildCorePackagingGenerateFilesystemPackageTargetsFile)" />

</Project>